Use Windows Env Var to point to driver's .exe files

    System var:

        GECKO_PATH  ->  C:\Users\Lens\IdeaProjects\PluralsightAutomatedWebTesting\tools_downloads\chromedriver_win32\

    add to PATH:

        %GEKCKO_PATH%;

Finding Elements

    ClassName: unique css className (index for multiple matches)

    Id (prefered): most usefull & absolute

    Name: name property of a HTML element

    TagName: HTML tag

    CssSelector

    LinkText

    PartialLinkText

    XPath: xPath-expression

WebElement Interface methods

    clear

    click

    findElement(s)

    getAttribute

    getCssValue

    sendKeys

    getSize

    getTagName

CssSelector tool:

    https://try.jsoup.org/

        fetch url -> enter url of webPage

        css query -> a[class=rg_l]

Radio Buttons

    often have no ID

        select by name

        select by tag


        <input type="radio" name="color" value="red" checked>Red<br>
        <input type="radio" name="color" value="green">Green<br>
        <input type="radio" name="color" value="blue">Blue<br>

    List<WebElement> radioButtons = webDriver.findElements(By.name("color"));


intellij setting to open an html page from intellij

    allows unsigned requests

Checkboxes

        <input type="checkbox" id="mayoCheckbox" value="mayo"> Mayo<br>
        <input type="checkbox" id="lettuceCheckbox" value="lettuce"> Lettuce<br>
        <input type="checkbox" id="turkeyCheckbox" value="turkey"> Turkey<br>

    WebElement checkboxWebElement = webDriver.findElement(By.id("lettuceCheckbox"));
    checkboxWebElement.click();

select items

        <select id="select1">
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                    <option value="maybe">Maybe</option>
        </select>

     WebElement selectWebElement = webDriver.findElement(By.id("select1"));
     //wrapperClass from org.openqa.selenium.support.ui.Select;
     Select select = new Select(selectWebElement);
     select.selectByVisibleText("Maybe"

tables

    nested elements identification with XPath

            <table>
                <tr>
                    <td>Table 1 Row 1</td>
                    <td>
                        <table>
                            <tr><td>Table 2 Row 1</td></tr>
                            <tr><td>Table 2 Row 2</td></tr>
                        </table>
                    </td>
                </tr>
            </table>

        WebElement outerTableWebElement = webDriver.findElement(By.tagName("table"));
        WebElement innerTableWebElement = outerTableWebElement.findElement(By.tagName("table"));
        WebElement rowWebElement = innerTableWebElement.findElements(By.tagName("td")).get(1);
        System.out.println(rowWebElement.getText());

     now with xpath:

        WebElement rowWebElement = webDriver.findElement(By.xpath("/html/body/table/tbody/tr/td[2]/table/tbody/tr[2]/td"));
        System.out.println(rowWebElement.getText());

Waiting

    implicit wait

        sets a global setting for the driver so that every time an element is
        selected its going to wait for that timeout if it cannot find that element

        it is refreshing the DOM every 500ms to see if the element exists yet

        this wait delays on every element on the page


            webDriver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

                this waits 10 seconds for each elemnt in the page to show up

    explicit wait

        use this when you can specify when something is dynamic and other things
        are not dynamic (and it should be available instantly),
        hence the need or no need for a wait

            WebDriverWait webDriverWait = new WebDriverWait(webDriver, 10);
            webDriverWait.until(ExpectedConditions.presenceOfElementLocated(By.linkText("Images")));

    explicit wait only waits for a specific element, implicit wait waits on every element


Selenium Server

    remotely execute tests

    can be ran as part of a grid

    can run tests from webdriver or ide

    get server from seleniumhq.org

    start with

        java -jar selenium-server-standalone-3.141.59.jar

    running a test on server

        remove the normal Webdriver declaration and add

            WebDriver webDriver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), DesiredCapabilities.chrome());

        catch exception, add to method signature

            throws MalformedURLException

    in gridmode

        setting up the hub (from grid)

            starting the hub

                java -jar selenium-server-standalone-3.141.59.jar -role hub

            in browser goto

                http://192.168.0.123:4444/grid/console

            start a node in another cmd window with the info from the previously started hub after the hub-flag

                java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://192.168.0.123:4444/grid/register/

            in the browser we can see the added node now (refresh)

            add a 2nd node, specify a different port than the standard 5555 port

                java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://192.168.0.123:4444/grid/register/ -port 5556

            2nd node can be seen in the browser (refresh)

            ps:

                WebDriver webDriver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), new DesiredCapabilities("firefox","", Platform.VISTA));

    parallel processing

        the grid makes it possible but you have to initiate it

    grid strategies

        across multiple machines eg:

            different unused pc's

            VMs/hypervisors

            DOCKER instances

            Amazon EC2

            your own cloud foundry

Framework

    Why not only record tests with Selenium IDE?

        brittle tests: test depends on web app only, if the app changes all the recorded tests need to be rewritten

            with a framework only the part that is changed needs to be changed, usually only in 1 place

        recording is slow in the long run and with added complexity

            a framework starts off slower but soon takes on speed with the reusability of the already made parts

    Page Object Model

        mapping the model of the test framework after the model of the pages of the application:

            Login Page          <--             Login Page Object       <--\
            Shopping Cart       <--             Shopping Cart Object    <-- |---            TESTS
            Orders Page         <--             Orders Page Object      <--/







